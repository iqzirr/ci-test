# .github/workflows/docker-publish.yml

name: Docker Image CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Triggers the workflow on push events to the main branch
    # You can also trigger on tags, e.g., for releases:
    # tags:
    #   - 'v*.*.*'
  pull_request:
    branches: [ "main" ] # Triggers on pull requests to the main branch (builds but doesn't push)

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    permissions:
      contents: read # Needed to check out the repository
      packages: write # Needed to push to GitHub Container Registry (if you choose that)
      # id-token: write # Needed for OIDC if you use cloud provider registries like AWS ECR, GCP AR

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      # Buildx is a Docker CLI plugin that extends the docker build command
      # with the full support of the features provided by Moby BuildKit builder toolkit.
      # It provides the same user experience as docker build with many new features
      # like creating scoped builder instances and building against multiple nodes concurrently.

    - name: Log in to Docker Hub (example)
      # If you are pushing to Docker Hub
      # For other registries (like GHCR, ECR, GCR), this step will be different.
      # IMPORTANT: You need to store DOCKERHUB_USERNAME and DOCKERHUB_TOKEN as secrets in your GitHub repository.
      # Go to your repository's Settings > Secrets and variables > Actions > New repository secret
      if: github.event_name != 'pull_request' # Only login if not a pull request
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Example for GitHub Container Registry (ghcr.io)
    # - name: Log in to GitHub Container Registry
    #   if: github.event_name != 'pull_request'
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.repository_actor }} # or github.actor
    #     password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: | # List of Docker images to use.
          # For Docker Hub: yourusername/your-image-name
          ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-github-action
          # For GitHub Container Registry: ghcr.io/yourusername/your-repo-name
          # ghcr.io/${{ github.repository_owner }}/go-hello-world
        tags: | # Docker tags
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha # Also tag with the git SHA

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: . # Build context is the root of the repository
        file: ./Dockerfile # Path to the Dockerfile
        push: ${{ github.event_name != 'pull_request' }} # Push only if it's not a pull request
        tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata-action
        labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata-action
        cache-from: type=gha # Enable build cache from GitHub Actions
        cache-to: type=gha,mode=max # Enable build cache to GitHub Actions (mode=max for full cache)

  update-the-image:
    runs-on: self-hosted # Use the latest Ubuntu runner
    steps:
    - name: Update and run the image
      run: | # Using a multi-line script
        docker run -d --name hello-world-go  $USERNAME/hello-world-github-action:$TAGS
      env:
        USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        TAGS: ${{ steps.meta.outputs.tags }}